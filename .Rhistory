ggplot(results_df %>% filter(p>1), aes(x = p, y = Lp_value/mu)) +
geom_line() +
labs(title = "L_p Value vs p for Different Variances",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df, #%>% filter(p>1),
aes(x = p, y = Lp_value/mu)) +
geom_line() +
labs(title = "L_p Value vs p for Different Variances",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
# Create a data frame for ggplot
sampled_degrees_infectee <- samples #or, rnbinom(n_samples, size = 5, prob = 0.5) # mean 5  var 10 prob 0.5000000  size 5.000000
df_infectee <- data.frame(degree = sampled_degrees_infectee)
# Define f(x) as (x/<x>)*p(x)
f_x <- function(x, size, prob) {
# Mean <x> (expected value)
mean_x <- (size * (1 - prob)) / prob
# Negative binomial probability p(x)
p_x <- dnbinom(x, size = size, prob = prob)
# Compute f(x) = (x/<x>) * p(x)
f_value <- (x / mean_x) * p_x
# Return the value of f(x)
return(f_value)
}
x_values <- 0:10^4
f_x_dens <- f_x(x_values,size=params_df$size,prob=params_df$prob)
sampled_degrees_infector <- sample(x_values, size =n_samples, prob = f_x_dens, replace = T)
df_infector <- data.frame(degree = sampled_degrees_infector)
mean(sampled_degrees_infectee^2)/mean(sampled_degrees_infectee); mean(sampled_degrees_infector)
# Plot histogram using ggplot2
degree_hist_infectee_plot <- ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 40, by = 1)) +
theme_bw() +
xlim(c(0,40))+
labs(title = "Infectee's degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infector_plot <- ggplot(df_infector, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 40, by = 1)) +
theme_bw() +
xlim(c(0,40))+
labs(title = "Infector's degree Distribution",
x = "Degree (x)",
y = "Frequency")
(degree_hist_infectee_plot/degree_hist_infector_plot)
ggplot(results_df %>% filter(p>0),
aes(x = p, y = Lp_value/mu)) +
geom_line() +
xlim(c(0,5))+
labs(title = "L_p Value vs p for Different Variances",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df %>% filter(p>0),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(0,5))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df %>% filter(2>p>1),
ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(0,5))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
Lp_line_plot <- ggplot(results_df %>% filter(p>0),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(0,5))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-10^(-10),20))+
labs(title = "Infectee's degree Distribution",
x = "Degree (x)",
y = "Frequency")
ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,20))+
labs(title = "Infectee's degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infectee_plot <- ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Infectee's degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infector_plot <- ggplot(df_infector, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Infector's degree Distribution",
x = "Degree (x)",
y = "Frequency")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
degree_hist_infectee_plot <- ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Random individuals' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infector_plot <- ggplot(df_infector, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Identified cases' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
Lp_line_zoomed_plot <- ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_zoomed_plot)+plot_annotation(tag_levels = "A")
size
params_df
results_df
0^1
0^1.9
(params_df$size + seq(1,2,by=0.1) - 1) * ((1 - params_df$prob) / params_df$prob)
results_df
gamma(params_df$size)
gamma(params_df$size+1)
gamma(params_df$size-1)
gamma(params_df$size)/gamma(params_df$size-1)
p_range
gamma(params_df$size+seq(1,2,by=0.1))/gamma(params_df$size-1+seq(1,2,by=0.1))
gamma(params_df$size+seq(1,2,by=0.1))/gamma(params_df$size-1+seq(1,2,by=0.1)) * ((1 - params_df$prob) / params_df$prob)
(params_df$size + seq(1,2,by=0.1) - 1) * ((1 - params_df$prob) / params_df$prob)
install.packages("gpindex")
library(gpindex)
x <- 2:3
w <- c(0.25, 0.75)
all.equal(lehmer_mean(1)(x, w), arithmetic_mean(x, w))
all.equal(lehmer_mean(0)(x, w), harmonic_mean(x, w))
all.equal(lehmer_mean(0.5)(x), geometric_mean(x))
lehmer_mean(1)(x, w)
lehmer_mean(1)(x, 1)
sampled_degrees_infectee
wei <- dnbinom(sampled_degrees_infectee, size=params_df$size,prob=params_df$prob)
lehmer_mean(2)(sampled_degrees_infectee, wei)
mom_mean <- function(r,samples){
compute_pth_moment(p = x, samples = samples) / compute_pth_moment(p = (x - 1), samples = samples)
}
mom_mean(2, sampled_degrees_infectee)
compute_pth_moment(p = 2, samples = samples)
lehmer_mean(2)(sampled_degrees_infectee, wei)
lehmer_mean(1)(sampled_degrees_infectee, wei)
lehmer_mean(2)(sampled_degrees_infectee, wei)
lehmer_mean(3)(sampled_degrees_infectee, wei)
mom_mean(2, sampled_degrees_infectee)
compute_pth_moment(p = 2, samples = samples)
length(sampled_degrees_infectee)
lehmer_mean(3)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
compute_pth_moment(p = 2, samples = samples)
compute_pth_moment
lehmer_mean(3)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
lehmer_mean(2)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
lehmer_mean(1)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
wei
lehmer_mean(1)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
lehmer_mean(2)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
compute_pth_moment(p = 2, samples = samples)/compute_pth_moment(p = 1, samples = samples)
compute_pth_moment(p = 1, samples = samples)
compute_pth_moment(p = 2, samples = samples)
compute_pth_moment(p = 2, samples = samples)/compute_pth_moment(p = 1, samples = samples)
samples
all.equal(samples,sampled_degrees_infectee)
mom_mean(2, sampled_degrees_infectee)
compute_pth_moment(p = 2, samples = samples)/compute_pth_moment(p = 1, samples = samples)
mom_mean
mom_mean(2, samples)
mom_mean <- function(x,samples){
compute_pth_moment(p = x, samples = samples) / compute_pth_moment(p = (x - 1), samples = samples)
}
mom_mean(2, samples)
mom_mean(2, sampled_degrees_infectee)
compute_pth_moment(p = 2, samples = samples)/compute_pth_moment(p = 1, samples = samples)
lehmer_mean(2)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
mom_mean(p_range, sampled_degrees_infectee)
mom_result <- unlist(lapply(p_range, function(x) {
mom_mean(x, sampled_degrees_infectee)
}))
lehmer_result <- unlist(lapply(p_range, function(x) {
lehmer_mean(x)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
}))
all.equal(mom_result, lehmer_result)
plot(p_range, mom_result)
plot(p_range, lehmer_result)
lehmer_result
p_range[200]
lehmer_mean(0.99)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
lehmer_mean(0.999)(sampled_degrees_infectee, rep(1,length(sampled_degrees_infectee)))
sampled_degrees_infectee[sampled_degrees_infectee>0]
xxx<-sampled_degrees_infectee[sampled_degrees_infectee>0]
lehmer_mean(0.999)(xxx,rep(1,length(xxx))
)
lehmer_mean(p_range)(xxx,rep(1,length(xxx)))
lehmer_result_xxx <- unlist(lapply(p_range, function(x) {
lehmer_mean(x)(xxx, rep(1,length(xxx)))
}))
plot(p_range, lehmer_result_xxx)
0^(-1)
mom_result_xxx <- unlist(lapply(p_range, function(x) {
mom_mean(x, xxx)
}))
plot(p_range, mom_result_xxx)
all.equal(mom_result_xxx, lehmer_result_xxx)
p_range
p_range_wide <- seq(0,100,by=0.5)
mom_result_xxx <- unlist(lapply(p_range_wide, function(x) {
mom_mean(x, xxx)
}))
plot(p_range_wide, mom_result_xxx)
p_range_wide <- seq(-10,100,by=0.5)
mom_result_xxx <- unlist(lapply(p_range_wide, function(x) {
mom_mean(x, xxx)
}))
plot(p_range_wide, mom_result_xxx)
max(xxx)
compute_pth_moment <- function(p, samples) {
# define N
N <- length(samples)
# remove 0 from samples
samples_nonzero <- samples[samples>0]
# compute p-th moment
moment <- sum(samples_nonzero^p) / N
#return
return(moment)
}
p_range <- seq(-10, 50, by = 0.5)
samples <- samples_list$samples[[1]]
Lp_value <- unlist(lapply(p_range, function(x) {
compute_pth_moment(p = x, samples = samples) / compute_pth_moment(p = (x - 1), samples = samples)
}))
results_df <- data.frame(p = p_range, Lp_value = Lp_value, variance = samples_list$var[1])
p_range
ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
Lp_line_plot <- ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
Lp_line_zoomed_plot <- ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
# Create a data frame for ggplot
sampled_degrees_infectee <- samples #or, rnbinom(n_samples, size = 5, prob = 0.5) # mean 5  var 10 prob 0.5000000  size 5.000000
df_infectee <- data.frame(degree = sampled_degrees_infectee)
# Define f(x) as (x/<x>)*p(x)
f_x <- function(x, size, prob) {
# Mean <x> (expected value)
mean_x <- (size * (1 - prob)) / prob
# Negative binomial probability p(x)
p_x <- dnbinom(x, size = size, prob = prob)
# Compute f(x) = (x/<x>) * p(x)
f_value <- (x / mean_x) * p_x
# Return the value of f(x)
return(f_value)
}
x_values <- 0:10^4
f_x_dens <- f_x(x_values,size=params_df$size,prob=params_df$prob)
sampled_degrees_infector <- sample(x_values, size =n_samples, prob = f_x_dens, replace = T)
df_infector <- data.frame(degree = sampled_degrees_infector)
#these values should be close
mean(sampled_degrees_infectee^2)/mean(sampled_degrees_infectee); mean(sampled_degrees_infector)
# Plot histogram using ggplot2
degree_hist_infectee_plot <- ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Random individuals' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infector_plot <- ggplot(df_infector, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Identified cases' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_zoomed_plot)+plot_annotation(tag_levels = "A")
results_df %>% filter(p>1) %>% filter(p<2)
p_range_zoom <- seq(1, 2, by = 0.01)
p_range_wide <- seq(-10, 50, by = 0.5)
p_range <- seq(-10, 50, by = 0.01)
# Compute Lp_value for the current sample set
Lp_value <- unlist(lapply(p_range, function(x) {
compute_pth_moment(p = x, samples = samples) / compute_pth_moment(p = (x - 1), samples = samples)
}))
Lp_line_zoomed_plot <- ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
# Create a data frame for ggplot
sampled_degrees_infectee <- samples #or, rnbinom(n_samples, size = 5, prob = 0.5) # mean 5  var 10 prob 0.5000000  size 5.000000
df_infectee <- data.frame(degree = sampled_degrees_infectee)
# Define f(x) as (x/<x>)*p(x)
f_x <- function(x, size, prob) {
# Mean <x> (expected value)
mean_x <- (size * (1 - prob)) / prob
# Negative binomial probability p(x)
p_x <- dnbinom(x, size = size, prob = prob)
# Compute f(x) = (x/<x>) * p(x)
f_value <- (x / mean_x) * p_x
# Return the value of f(x)
return(f_value)
}
x_values <- 0:10^4
f_x_dens <- f_x(x_values,size=params_df$size,prob=params_df$prob)
sampled_degrees_infector <- sample(x_values, size =n_samples, prob = f_x_dens, replace = T)
df_infector <- data.frame(degree = sampled_degrees_infector)
#these values should be close
mean(sampled_degrees_infectee^2)/mean(sampled_degrees_infectee); mean(sampled_degrees_infector)
# Plot histogram using ggplot2
degree_hist_infectee_plot <- ggplot(df_infectee, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Random individuals' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
degree_hist_infector_plot <- ggplot(df_infector, aes(x = degree)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black", boundary = 0.5) +
scale_x_continuous(breaks = seq(0, 20, by = 1)) +
theme_bw() +
xlim(c(-1,21))+
labs(title = "Identified cases' contact degree Distribution",
x = "Degree (x)",
y = "Frequency")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_zoomed_plot)+plot_annotation(tag_levels = "A")
ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
results_df %>% filter(p>1) %>% filter(p<2)
p_range
Lp_value
results_df
p_range
length(Lp_value)
length(p_range)
results_df %>% filter(p>1)
results_df
results_df <- data.frame(p = p_range, Lp_value = Lp_value, variance = samples_list$var[1])
results_df %>% filter(p>1)
ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df %>% filter(p>1) %>% filter(p<2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
ggplot(results_df %>% filter(p>=1) %>% filter(p<=2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_zoomed_plot)+plot_annotation(tag_levels = "A")
### Plot using ggplot2 -----
Lp_line_plot <- ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
Lp_line_zoomed_plot <- ggplot(results_df %>% filter(p>=1) %>% filter(p<=2),
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(1,2))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_plot)+plot_annotation(tag_levels = "A")
((degree_hist_infectee_plot/degree_hist_infector_plot)|Lp_line_zoomed_plot)+plot_annotation(tag_levels = "A")
ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()+
geom_line(size = 4)
ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()+
geom_line(size = 2)
ggplot(results_df,
aes(x = p, y = Lp_value)) +
geom_line() +
xlim(c(min(p_range),max(p_range)))+
labs(title = "L_p Value (NB distribution with mean of 2.4 and variance of 3.6)",
x = "p",
y = "L_p Value",
color = "Variance") +
theme_bw()+
geom_line(size = 2, color = "blue")
0^0
0^10
0^0.1
0^0
0^(-1)
setwd("~/Dropbox/fmiura.github.io")
wd()
getwd()
